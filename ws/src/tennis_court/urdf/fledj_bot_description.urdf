<?xml version="1.0"?>
<robot name="fledj_bot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.31"/>
  <xacro:property name="base_length" value="0.34"/>
  <xacro:property name="base_height" value="0.18"/>

  <xacro:property name="pickside_width" value="0.05"/>
  <xacro:property name="pickside_length" value="0.2"/>
  <xacro:property name="pickside_height" value="0.12"/>

  <xacro:property name="pickback_width" value="0.45"/>
  <xacro:property name="pickback_length" value="0.01"/>
  <xacro:property name="pickback_height" value="0.12"/>

  <xacro:property name="pickside_ygap" value="0.03"/>
  <xacro:property name="pick_zoff" value="-0.015"/>

  <xacro:property name="wheel_radius" value="0.10"/>
  <xacro:property name="wheel_width" value="0.08"/>
  <xacro:property name="wheel_ygap" value="0.025"/>
  <xacro:property name="wheel_zoff" value="0.05"/>
  <xacro:property name="wheel_xoff" value="0.12"/>

  <xacro:property name="caster_xoff" value="0.09"/>

  <!--Robot shape (base_length+pickback_length+pickside_length, pickback_width+pickside_width, wheel_radius+base_height)
  Soit  (0.34+0.01+0.15, 0.45+0.05, 0.1+0.18) = (0.5, 0.5, 0.28) -->
  <!-- Garde au sol (wheel_radius+wheel_zoff-pickback_height/2)
  Soit  0.1+0.05-0.06 = 0.09m = 9cm -->


  <!-- Define some commonly used intertial properties  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>      
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />      
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> 
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>
  
  <gazebo reference="base_link">
    <material>Gazebo/Red</material>
    <mass value="1"/>
    <pose>-5 -5 1</pose>
  </gazebo>


   <!-- Robot Footprint -->
  <link name="base_footprint">
  </link>

  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>


  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> 
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="3.0" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <gazebo reference="drivewhl_l_link">
    <material>Gazebo/Green</material>
    <mass value="0.5"/>
    <mu>1</mu>
    <mu2>1</mu2>
  </gazebo>
  <gazebo reference="drivewhl_r_link">
    <material>Gazebo/Green</material>
    <mass value="0.5"/>
    <mu>1</mu>
    <mu2>1</mu2>
  </gazebo>


  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
  </link>

  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <gazebo reference="front_caster">
    <material>Gazebo/Green</material>
    <mu>0.</mu>
    <mu2>0.</mu2>
  </gazebo>


  <!-- Ramasseur de balles -->
  <xacro:macro name="pickside" params="prefix x_reflect y_reflect">
  <link name="${prefix}_link">
    <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <box size="${pickside_length} ${pickside_width} ${pickside_height}"/>
    </geometry>
    </visual>

    <collision>
    <origin xyz="0 0 0" rpy="0 0 0"/> 
    <geometry>
      <box size="${pickside_length} ${pickside_width} ${pickside_height}"/>
    </geometry>
    </collision>

    <xacro:box_inertia m="0.5" w="${pickside_width}" d="${pickside_length}" h="${pickside_height}"/>
  </link>

  <joint name="${prefix}_joint" type="fixed">
    <parent link="base_link"/>
    <child link="${prefix}_link"/>
    <origin xyz="${-x_reflect*(base_length/2+pickback_length+pickside_length/2)} ${y_reflect*(pickback_width/2+pickside_ygap)} ${pick_zoff}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>
  </xacro:macro>

  <xacro:pickside prefix="pickside_l" x_reflect="-1" y_reflect="1" />
  <xacro:pickside prefix="pickside_r" x_reflect="-1" y_reflect="-1" />

  <gazebo reference="pickside_l_link">
    <material>Gazebo/Green</material>
    <mass value="0.1"/>
  </gazebo>
  <gazebo reference="pickside_r_link">
    <material>Gazebo/Green</material>
    <mass value="0.1"/>
  </gazebo>


  <link name="pickback">
	  <visual>
	    <geometry>
	      <box size="${pickback_length} ${pickback_width} ${pickback_height}"/>
	    </geometry>
	  </visual>

	  <collision>
	    <origin xyz="0 0 0" rpy="0 0 0"/>
	    <geometry>
	      <box size="${pickback_length} ${pickback_width} ${pickback_height}"/>
	    </geometry>
	  </collision>

	  <xacro:box_inertia m="0.5" w="${pickback_width}" d="${pickback_length}" h="${pickback_height}"/>
  </link>

  <joint name="pickback_joint" type="fixed">
  	<parent link="base_link"/>
  	<child link="pickback"/>
  	<origin xyz="${base_length/2+pickback_length/2} 0 ${pick_zoff}" rpy="0 0 0"/>
  	<axis xyz="0 1 0"/>
  </joint>

  <gazebo reference="pickback">
    <material>Gazebo/Green</material>
    <mass value="0.1"/>
  </gazebo>


  <xacro:macro name="marker" params="prefix x_pos color">
    <!-- Define the link -->
    <link name="marker_${prefix}_link">
      <visual>
        <origin rpy="0 0 0" xyz="${x_pos} 0 0.1"/>
        <geometry>
          <sphere radius="0.025"/>
        </geometry>
      </visual>
    </link>

    <gazebo reference="marker_${prefix}_link">
      <material>Gazebo/${color}</material>
    </gazebo>
    <!-- Define the joint between the base link and the link -->
    <joint name="$marker_${prefix}_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <parent link="base_link"/>
      <child link="marker_${prefix}_link"/>
    </joint>
  </xacro:macro>

  <xacro:marker prefix="1" x_pos="-0.1" color="Blue"/>
  <xacro:marker prefix="2" x_pos="0.1" color="Black"/>


  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>
    
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01"/>
  </joint>
    
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
     <imu>
     	<angular_velocity>
     	  <x>
     	    <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
 
  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/demo</namespace>
      </ros>

      <alwaysOn>true</alwaysOn>
      <update_rate>20</update_rate>

      <!-- wheels -->
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>1</wheel_separation>
      <wheel_diameter>.5</wheel_diameter>

      <!-- limits -->	
      <max_wheel_torque>40</max_wheel_torque>
      <max_wheel_acceleration>5</max_wheel_acceleration>

      <!-- output -->
      <robot_base_frame>base_link</robot_base_frame>

      <!-- commands -->
      <torque>40</torque>
      <commandTopic>cmd_vel</commandTopic>
    </plugin>
  </gazebo>

  
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.035"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>
  
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.215 0 0.05" rpy="0 0 0"/>
  </joint>

  <link name="camera_depth_frame"/>

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint>

  <gazebo reference="camera_link">
    <sensor name="depth_camera" type="depth">
      <visualize>true</visualize>
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>camera_depth_frame</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
</robot>
